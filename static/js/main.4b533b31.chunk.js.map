{"version":3,"sources":["pages/main/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainPanel","state","type","now","moment","format","timer","setTimeout","setState","JSONData","this","setInterval","clearInterval","xAxis","axisTick","axisLine","lineStyle","opacity","color","yAxis","name","splitLine","dataset","source","series","label","show","position","itemStyle","x","y","x2","y2","colorStops","offset","global","barWidth","map","each","count","legend","orient","right","top","textStyle","radius","center","height","className","Header","Content","gutter","span","SectionHead","title","option","getBarOption","notMerge","lazyUpdate","onChartReady","onChartReadyCallback","getPieOption","CenterNum","num","life","LifeBar","Footer","React","PureComponent","props","current","max","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b533b31.chunk.js","sourcesContent":["import React from 'react';\nimport ReactEcharts from \"echarts-for-react\";\nimport JSONData from './data.json'\nimport moment from 'moment'\nimport 'moment/locale/zh-cn';\nimport './main.less'\nimport { Row, Col, Layout } from 'antd'\n\nexport default class MainPanel extends React.PureComponent {\n    state = {\n        type: [],\n        now: moment().format('llll')\n    }\n    timer: any\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                type: JSONData.type\n            })\n        }, 500);\n        this.timer = setInterval(() => {\n            this.setState({\n                now: moment().format('llll')\n            })\n        }, 1000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.timer)\n    }\n    getBarOption() {\n        return {\n            xAxis: {\n                axisTick: false,\n                axisLine: {\n                    lineStyle: {\n                        opacity: 0.3,\n                        color: 'white',\n                    }\n                },\n                type: 'category',\n            },\n            yAxis: {\n                name: '数量',\n                axisTick: false,\n                axisLine: {\n                    lineStyle: {\n                        opacity: 0.3,\n                        color: 'white'\n                    }\n                },\n                splitLine: {\n                    lineStyle: {\n                        opacity: 0.3,\n                        type: 'dotted'\n                    }\n                }\n            },\n            dataset: {\n                source: JSONData.type\n            },\n            series: {\n                type: 'bar',\n                label: {\n                    show: true,\n                    position: 'top',\n                    color: 'white'\n                },\n                itemStyle: {\n                    color: {\n                        type: 'linear',\n                        x: 0,\n                        y: 0,\n                        x2: 0,\n                        y2: 1,\n                        colorStops: [{\n                            offset: 0, color: '#15AEFC' // 0% 处的颜色\n                        }, {\n                            offset: 1, color: '#0763FF' // 100% 处的颜色\n                        }],\n                        global: false // 缺省为 false\n                    }\n                },\n                barWidth: 15\n            }\n        }\n    }\n    getPieOption() {\n        return {\n            dataset: {\n                source: JSONData.type.map(each => {\n                    return {\n                        label: `${each.label} ${each.count}`,\n                        count: each.count\n                    }\n                })\n            },\n            legend: {\n                type: 'plain',\n                orient: 'vertical',\n                right: 30,\n                top: 'center',\n                textStyle: {\n                    color: '#fff'\n                }\n            },\n            series: {\n                type: 'pie',\n                radius: ['25%', '55%'],\n                center: ['35%', '50%'],\n                height: 200,\n                top: 'center'\n            }\n        }\n    }\n    onChartReadyCallback() {\n\n    }\n    render() {\n        const { now } = this.state\n        return (\n            <Layout className='panel-page'>\n                <Layout.Header className='header'>\n                    <div className='time'>{now}</div>\n                    <div className='title'>企业设备大数据平台</div>\n                </Layout.Header>\n                <Layout.Content className='content'>\n                    <Row gutter={32}>\n                        <Col span={8}>\n                            <div className='chartWrap'>\n                                <SectionHead title='类型'></SectionHead>\n                                <ReactEcharts\n                                    option={this.getBarOption()}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                //   theme={\"theme_name\"}\n                                //   onEvents={EventsDict}\n                                //   opts={} \n                                />\n                            </div>\n                            <div className='chartWrap'>\n                                <SectionHead title='状态'></SectionHead>\n                                <ReactEcharts\n                                    option={this.getPieOption()}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                //   theme={\"theme_name\"}\n                                //   onEvents={EventsDict}\n                                //   opts={} \n                                />\n                            </div>\n                        </Col>\n                        <Col span={8}>\n                            <div className='chartWrap center'>\n                                <Row>\n                                    <Col span={3}></Col>\n                                    <Col span={6}><CenterNum label='设备数' num='1221' /></Col>\n                                    <Col span={6}></Col>\n                                    <Col span={6}><CenterNum label='设备数' num='1221' /></Col>\n                                    <Col span={3}></Col>\n                                </Row>\n                                <Row>\n                                    <Col span={1}></Col>\n                                    <Col span={6}><CenterNum label='设备数' num='1221' /></Col>\n                                    <Col span={10}></Col>\n                                    <Col span={6}><CenterNum label='设备数' num='1221' /></Col>\n                                    <Col span={1}></Col>\n                                </Row>\n                                <Row>\n                                    <Col span={3}></Col>\n                                    <Col span={6}><CenterNum label='设备数' num='1221' /></Col>\n                                    <Col span={6}></Col>\n                                    <Col span={6}><CenterNum label='设备数' num='1221' /></Col>\n                                    <Col span={3}></Col>\n                                </Row>\n                            </div>\n                            <div className='chartWrap'>\n                                <SectionHead title='易耗品使用统计'></SectionHead>\n                                {JSONData.life.map(each => <LifeBar {...each}></LifeBar>)}\n                                <div>第一会议投影仪B</div>\n                            </div>\n                        </Col>\n                        <Col span={8}>\n                            <div className='chartWrap'>\n                                <SectionHead title='位置分布'></SectionHead>\n                                <ReactEcharts\n                                    option={this.getBarOption()}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                //   theme={\"theme_name\"}\n                                //   onEvents={EventsDict}\n                                //   opts={} \n                                />\n                            </div>\n                            <div className='chartWrap'>\n                                <SectionHead title='级别'></SectionHead>\n                                <ReactEcharts\n                                    option={this.getPieOption()}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                //   theme={\"theme_name\"}\n                                //   onEvents={EventsDict}\n                                //   opts={} \n                                />\n                            </div>\n                        </Col>\n                    </Row>\n                </Layout.Content>\n                <Layout.Footer className='footer'>技术支持： xxxxxxx公司</Layout.Footer>\n            </Layout>\n        )\n    }\n}\n\n// 图标区域标题\nfunction SectionHead({ ...props }) {\n    return (\n        <div className='section-head'>{props.title}</div>\n    )\n}\n// 中心统计数字\nfunction CenterNum({ ...props }) {\n    return (\n        <div className='center-num'>\n            <div className='num-text'>{props.num}</div>\n            <div className='num-label'>{props.label}</div>\n        </div>\n    )\n}\n\n// 寿命显示条\nfunction LifeBar({ ...props }) {\n    return (\n        <Row gutter={8}>\n            <Col span={3}>{props.label}</Col>\n            <Col span={15}>{props.current}</Col>\n            <Col span={6}>{props.max}</Col>\n        </Row>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPanel from './pages/main/main';\n\nfunction App() {\n  return (\n    <MainPanel/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}