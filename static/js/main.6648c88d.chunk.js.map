{"version":3,"sources":["util/http.js","pages/main/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","httpPost","url","formData","FormData","addCommonParam","handleResponse","fetch","method","mode","body","fetchPromise","Promise","resolve","reject","then","res","json","Response","code","data","msg","params","token","append","MainPanel","state","type","status","room","level","life","center","now","moment","format","lifeIndex","timer","lifeCounter","this","getPageData","setInterval","setState","length","clearInterval","className","Header","Content","gutter","span","SectionHead","title","option","getBarOption","notMerge","lazyUpdate","onChartReady","onChartReadyCallback","getPieOption","CenterNum","label","num","counnt","unit","amount","nowarrantycount","nowarrantyamount","warrantycount","warrantyamount","justify","LifeBars","Footer","React","PureComponent","props","LifeBar","current","blub_one_used","max","blub_one_limit","blub_two_used","blub_two_limit","pt","percent","align","style","width","source","dataset","map","each","count","legend","orient","right","top","textStyle","color","series","radius","height","xAxis","axisTick","axisLine","lineStyle","opacity","yAxis","name","splitLine","show","position","itemStyle","x","y","x2","y2","colorStops","offset","global","barWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6648c88d.chunk.js","sourcesContent":["import { urlEncode } from \"./util\"\n\n// let BASE_URL = 'http://zwb-baojia.zhaodaka.vip/api/wechat'\nlet BASE_URL = '/admin/product'\n\nexport function httpGet(url, params = {}) {\n    params = addCommonParam(params)\n    return handleResponse(fetch(BASE_URL + url + '?' + urlEncode(params), {\n        mode: 'cors',\n    }))\n}\nexport function httpPost(url, formData = new FormData()) {\n    formData = addCommonParam(formData)\n    return handleResponse(fetch(BASE_URL + url, {\n        method: 'POST',\n        mode: 'cors',\n        body: formData\n    }))\n}\nfunction handleResponse(fetchPromise) {\n    return new Promise((resolve, reject) => {\n        fetchPromise.then(res => res.json()).then(Response => {\n            if (Response.code === 200) {\n                return resolve(Response.data)\n            } else {\n                return reject(Response.msg)\n            }\n        })\n    })\n}\n\nfunction addCommonParam(params) {\n    const token = 'babc19a9d04aec76040336681c62300d'\n    if (!!token) {\n        if (params.append) {\n            params.append('token', token)\n        } else {\n            params.token = token\n        }\n    }\n    return params\n}","import React from 'react';\nimport ReactEcharts from \"echarts-for-react\";\nimport moment from 'moment'\nimport 'moment/locale/zh-cn';\nimport './main.less'\nimport { Row, Col, Layout } from 'antd'\nimport { httpPost } from '../../util/http';\n\n\nexport default class MainPanel extends React.PureComponent {\n    state: any = {\n        type: [],\n        status: [],\n        room: [],\n        level: [],\n        life: [],\n        center: {},\n        now: moment().format('llll'),\n        lifeIndex: 0\n    }\n    timer: any\n    lifeCounter: any\n    componentDidMount() {\n        this.getPageData()\n        this.timer = setInterval(() => {\n            this.setState({\n                now: moment().format('llll')\n            })\n        }, 1000)\n        this.lifeCounter = setInterval(() => {\n            if (this.state.life.length <= 1) return\n            this.setState({\n                lifeIndex: this.state.lifeIndex + 1 >= this.state.life.length ? 0 : this.state.lifeIndex + 1\n            })\n        }, 3000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.timer)\n    }\n    getPageData() {\n        httpPost('/getProductCountType').then(center => {\n            this.setState({ center })\n        })\n        httpPost('/getProductListByType').then(type => {\n            this.setState({ type })\n        })\n        httpPost('/getProductListByStatus').then(status => {\n            this.setState({ status })\n        })\n        httpPost('/getProductListByRoom').then(room => {\n            this.setState({ room })\n        })\n        httpPost('/getProductListByLevel').then(level => {\n            this.setState({ level })\n        })\n        httpPost('/getBlubStatus').then(life => {\n            this.setState({ life })\n        })\n    }\n    onChartReadyCallback() {\n\n    }\n    render() {\n        const { now, center, type, status, room, level, life, lifeIndex } = this.state\n        return (\n            <Layout className='panel-page'>\n                <Layout.Header className='header'>\n                    <div className='time'>{now}</div>\n                    <div className='title'>企业设备大数据平台</div>\n                </Layout.Header>\n                <Layout.Content className='content'>\n                    <Row gutter={32}>\n                        <Col span={7}>\n                            <div className='chartWrap'>\n                                <SectionHead title='类型'></SectionHead>\n                                <ReactEcharts\n                                    option={getBarOption(type)}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                />\n                            </div>\n                            <div className='chartWrap'>\n                                <SectionHead title='状态'></SectionHead>\n                                <ReactEcharts\n                                    option={getPieOption(status)}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                />\n                            </div>\n                        </Col>\n                        <Col span={10}>\n                            <div className='chartWrap center'>\n                                <Row>\n                                    <Col span={3}></Col>\n                                    <Col span={6}><CenterNum label='设备总数' num={center.counnt} unit='个' /></Col>\n                                    <Col span={6}></Col>\n                                    <Col span={6}><CenterNum label='设备金额' num={center.amount} unit='万' /></Col>\n                                    <Col span={3}></Col>\n                                </Row>\n                                <Row>\n                                    <Col span={1}></Col>\n                                    <Col span={6}><CenterNum label='在保总数' num={center.nowarrantycount} /></Col>\n                                    <Col span={10}></Col>\n                                    <Col span={6}><CenterNum label='在保金额' num={center.nowarrantyamount} unit='万' /></Col>\n                                    <Col span={1}></Col>\n                                </Row>\n                                <Row>\n                                    <Col span={3}></Col>\n                                    <Col span={6}><CenterNum label='过保总数' num={center.warrantycount} /></Col>\n                                    <Col span={6}></Col>\n                                    <Col span={6}><CenterNum label='过保金额' num={center.warrantyamount} unit='万' /></Col>\n                                    <Col span={3}></Col>\n                                </Row>\n                            </div>\n                            <div className='chartWrap'>\n                                <SectionHead title='易耗品使用统计'></SectionHead>\n                                <Row justify='space-between' className='life-legend'>\n                                    <Col className='legend warn'></Col>\n                                    <Col className='legend error'></Col>\n                                    <Col className='legend ok'></Col>\n                                </Row>\n                                <LifeBars {...life[lifeIndex]} />\n                            </div>\n                        </Col>\n                        <Col span={7}>\n                            <div className='chartWrap'>\n                                <SectionHead title='位置分布'></SectionHead>\n                                <ReactEcharts\n                                    option={getBarOption(room)}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                />\n                            </div>\n                            <div className='chartWrap'>\n                                <SectionHead title='级别'></SectionHead>\n                                <ReactEcharts\n                                    option={getPieOption(level)}\n                                    notMerge={true}\n                                    lazyUpdate={true}\n                                    onChartReady={this.onChartReadyCallback}\n                                />\n                            </div>\n                        </Col>\n                    </Row>\n                </Layout.Content>\n                <Layout.Footer className='footer'>技术支持： xxxxxxx公司</Layout.Footer>\n            </Layout>\n        )\n    }\n}\n\n// 图标区域标题\nfunction SectionHead({ ...props }) {\n    return (\n        <div className='section-head'>{props.title}</div>\n    )\n}\n// 中心统计数字\nfunction CenterNum({ ...props }) {\n    return (\n        <div className='center-num'>\n            <div className='num-text'>{!!props.num ? props.num + props.unit : '--'}</div>\n            <div className='num-label'>{props.label}</div>\n        </div>\n    )\n}\n\n// 易耗品寿命\nfunction LifeBars({ ...props }) {\n    return (\n        <>\n            <LifeBar current={props.blub_one_used} max={props.blub_one_limit} label={'灯泡1'} />\n            <LifeBar current={props.blub_two_used} max={props.blub_two_limit} label={'灯泡1'} />\n            <div className='life-footer'>{props.pt}</div>\n        </>\n    )\n}\n\n// 寿命显示条\nfunction LifeBar({ ...props }) {\n    const percent = props.max > 0 ? props.current / props.max : 0\n    let className = 'ok'\n    if (percent > 0.4) {\n        className = 'warn'\n    }\n    if (percent > 0.7) {\n        className = 'error'\n    }\n    return (\n        <Row gutter={8} align='middle' className='progress-wrap'>\n            <Col span={5} className='progress-label'>{props.label}</Col>\n            <Col span={12} className='progress'>\n                <div className={`${className} progess-bar`} style={{ width: `${percent * 100}%` }}>\n                    {percent > 0.15 && <span>{percent * 100}%</span>}\n                </div>\n            </Col>\n            <Col span={6} className='progress-legend'><i className={`${className} legend-icon iconfont icon-warning`}></i>{props.current}/{props.max}</Col>\n        </Row>\n    )\n}\n\nfunction getPieOption(source: Array<any>) {\n    return {\n        dataset: {\n            source: source.map((each: any) => {\n                return {\n                    label: `${each.type} ${each.count}`,\n                    count: each.count\n                }\n            })\n        },\n        legend: {\n            type: 'plain',\n            orient: 'vertical',\n            right: 30,\n            top: 'center',\n            textStyle: {\n                color: '#fff'\n            }\n        },\n        series: {\n            type: 'pie',\n            radius: ['25%', '55%'],\n            center: ['35%', '50%'],\n            height: 200,\n            top: 'center'\n        }\n    }\n}\nfunction getBarOption(source: any) {\n    return {\n        xAxis: {\n            axisTick: false,\n            axisLine: {\n                lineStyle: {\n                    opacity: 0.3,\n                    color: 'white',\n                }\n            },\n            type: 'category',\n        },\n        yAxis: {\n            name: '数量',\n            axisTick: false,\n            axisLine: {\n                lineStyle: {\n                    opacity: 0.3,\n                    color: 'white'\n                }\n            },\n            splitLine: {\n                lineStyle: {\n                    opacity: 0.3,\n                    type: 'dotted'\n                }\n            }\n        },\n        dataset: {\n            source: source\n        },\n        series: {\n            type: 'bar',\n            label: {\n                show: true,\n                position: 'top',\n                color: 'white'\n            },\n            itemStyle: {\n                color: {\n                    type: 'linear',\n                    x: 0,\n                    y: 0,\n                    x2: 0,\n                    y2: 1,\n                    colorStops: [{\n                        offset: 0, color: '#15AEFC' // 0% 处的颜色\n                    }, {\n                        offset: 1, color: '#0763FF' // 100% 处的颜色\n                    }],\n                    global: false // 缺省为 false\n                }\n            },\n            barWidth: 15\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport MainPanel from './pages/main/main';\n\nfunction App() {\n  return (\n    <MainPanel/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}